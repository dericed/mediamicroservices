#!/bin/bash
# makebroadcast
# make broadcast version

# command-line options to set mediaid and original variables
while getopts lc opt ; do
	case $opt in
		l) audiomapping=" -map_audio_channel 0:1:0:0:1:0 -map_audio_channel 0:1:0:0:1:1 " ;;
		c) cropdetect="Y" ;;
	esac
done
shift $(( ${OPTIND} - 1 ))

version="1.2"
# history
# v 1.1 change from mov output to mxf output, force all output to hd
# v 1.2 revert to mov and ffmbc

scriptdir=`dirname "$0"`
. "$scriptdir/mmvariables"
. "$scriptdir/mmfunctions"
[ ! -f "$scriptdir/mmvariables" -o ! -f "$scriptdir/mmfunctions" ] && { echo "Missing '$scriptdir/mmvariables' and/or '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

cleanup(){
	log -a "Process aborted"
	exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM
log -b

[ "$#" = 0 ] && { ask_input ; once="y" ;};

while [ "$*" != ""  -o "$once" = "y" ] ; do
	once="n"
	[ "$#" != 0 ] && input="$1"
	[ -d "$input" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
	[ -f "$input" ] && { outputdir=`dirname "$input"`"/service" && logdir="`dirname "$input"`/service/logs" ;};
	[ ! "$outputdir" ] && { outputdir="$input/objects/service" && logdir="$input/metadata/submissionDocumentation/logs" ;};
	find_input "$input"

	filename=`basename "$sourcefile"`
	mediaid=`basename "$input" | cut -d. -f1`

	servicefile="$outputdir/${mediaid%.*}.mov"
	[ -s "$servicefile" ] && { report -wt "WARNING $servicefile already exists, skipping transcode" ; shift ; continue ;};

	report -dt "STATUS Transcoding for Omneon compliance."
	ffmpeg_opts=" -r ntsc"
	if [ -n "$audiomapping" ] ; then
		ffmpeg_opts+=" $audiomapping"
	else
		has_first_two_tracks_mono "$sourcefile"
		if [ "$MULTIMONO" = "Y" ] ; then
			audiomapping=" -map_audio_channel 0.1:0:0.1:0 -map_audio_channel 0.2:0:0.1:1 "
			ffmpeg_opts+=" $audiomapping"
		fi
	fi
	# choose video encoding strategy, if source is xdcam 50 mb/sec ntsc then copy the video, else transcode
	get_codectagstring "$sourcefile"
	if [ "$codec_tag_string" = "xd5b" ] ; then
		ffmpeg_opts+=" -c:v copy"
	else
		if [ "$cropdetect" = "Y" ] ; then
			get_cropdetection "$sourcefile"
			echo YEAHYAEAH
			if [ -n "$CROPADJ" ] ;then
				ffmpeg_opts+=" -vf '${CROPADJ},pad=ih*16/9:ih:(ow-iw)/2:(oh-ih)/2,scale=1920:1080:interl=1'"
			else
				ffmpeg_opts+=" -vf 'pad=ih*16/9:ih:(ow-iw)/2:(oh-ih)/2,scale=1920:1080:interl=1'"
			fi
		else
			ffmpeg_opts+=" -vf 'pad=ih*16/9:ih:(ow-iw)/2:(oh-ih)/2,scale=1920:1080:interl=1'"
		fi
		ffmpeg_opts+=" -target xdcamhd422 -vtag xd5b -tff -aspect 16:9 -threads 4"
	fi

	# add audio options
	ffmpeg_opts+=" -acodec pcm_s24le -ar 48k -ac 2"

	# set input options for ffmpeg
	inputoptions=" -y -threads 4"
	mkdir -p "$outputdir"
	ffmpeg_command="ffmbc $inputoptions -i \"$sourcefile\" $ffmpeg_opts \"$servicefile\""
	# log ffmpeg process
	if [ "$logdir" != "" ] ; then
		mkdir -p "$logdir"
		reportfile="ffmbc_$(date '+%Y%m%d-%H%M%S')_$(basename $0)_${version}.txt"
		echo "ffmbc started on $(date '+%F at %T')" > "${logdir}/${reportfile}"
		echo "Report written to \"${reportfile}\"" >> "${logdir}/${reportfile}"
		echo "Command line:" >> "${logdir}/${reportfile}"
	fi
	report -dt "Running: ${ffmpeg_command}"
	echo "$ffmpeg_command" >> "${logdir}/${reportfile}"
	eval "$ffmpeg_command 2> >(tee -a ${logdir}/${reportfile} >&2)"
	ffmpeg_err="$?"
	[ "$ffmpeg_err" -gt "0" ] && { report -wt "ffmpeg failed with error ${ffmpeg_err}" && exit 1;};
	shift
done
log -e
