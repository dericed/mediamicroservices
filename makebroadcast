#!/bin/bash
# makebroadcast
# v 1.1 change from mov output to mxf output, force all output to hd
# v 1.2 revert to mov and ffmbc
# v 1.3 revert back to ffmpeg
# v 1.4 adjust handling volume adjustment argument
VERSION="1.4"
VOLADJUST="Y"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg ffprobe)
_initialize_make
SUFFIX=""
EXTENSION="mov"
RELATIVEPATH="service"


_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will create a file suitable for broadcast or editing from a video file or package input with the following options."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename "${0}") [ -l ] [ -r ] [ -c ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -F (apply a formula, override default settings)"
    echo "  -s (create slate, which adds color bars, a slate, and 30 seconds of black at the end)"
    echo "  -l (only use the left channel of the first audio track)"
    echo "  -r (only use the right channel of the first audio track)"
    echo "  -c (run the video through a crop detection filter, then crop the video accordingly during transcoding, slower)"
    echo "  -v Y|N (run the video through a volume adjustment filter, then adjust the volume accordingly during transcoding, slower). Defaults to ${VOLADJUST}."
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && _usage

user_input="${*}"
# command-line options to adjust volume, delivery location, and slate creation
OPTIND=1
while getopts ":F:slrcv:o:d:e:E:nh" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}";;
        s) ADDSLATE="Y";;
        l) AUDIOMAP="L";;
        r) AUDIOMAP="R";;
        c) CROPDETECT="Y" ;;
        v) VOLADJUST="${OPTARG}";;
        o) OUTPUTDIR_FORCED="${OPTARG}" && _check_outputdir_forced ;;
        d) DELIVERDIR="${OPTARG}" && _check_deliverdir ;;
        e) EMAILADDRESS_DELIVERY="${OPTARG}" && check_emailaddress "${EMAILADDRESS_DELIVERY}" ;;
        E) EMAILADDRESS_OUTCOME="${OPTARG}" && check_emailaddress "${EMAILADDRESS_OUTCOME}" ;;
        n) DRYRUN=true;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makebroadcast" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

while [ "${*}" != "" ] ; do
    # get context about the input
    INPUT="${1}"
    shift
    if [ -z "${OUTPUTDIR_FORCED}" ] ; then
        [ -d "${INPUT}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/logs" ;};
        [ -f "${INPUT}" ] && { OUTPUTDIR=$(dirname "${INPUT}")"/${RELATIVEPATH}" && LOGDIR="$(dirname "${INPUT}")/${RELATIVEPATH}/logs" ;};
        [ ! "${OUTPUTDIR}" ] && { OUTPUTDIR="${INPUT}/objects/${RELATIVEPATH}" && LOGDIR="${INPUT}/metadata/logs" ;};
    else
        OUTPUTDIR="${OUTPUTDIR_FORCED}"
        LOGDIR="${OUTPUTDIR}/logs"
    fi
    _unset_variables
    _find_input "${INPUT}"
    MEDIAID=$(_readingestlog "media ID")
    if [[ ! "${MEDIAID}" ]] ; then
        MEDIAID=$(basename "${INPUT}" | cut -d. -f1)
    fi
    INGESTLOG="${LOGDIR}/capture.log"
    _report_to_db
    if [ "${ADDSLATE}" = "Y" ] ; then
        SUFFIX="_SLATE"
    fi

    _set_up_output

    # clear local arrays
    INTIME=""
    OUTTIME=""
    audio_adjustment=""

    _get_broadcastduration "${SOURCEFILE}"
    _get_videostreamcount "${SOURCEFILE}"
    _get_audiostreamcount "${SOURCEFILE}"


    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        # get information on the input
        _get_sar "${SOURCEFILE}"
        if [ "${CROPDETECT}" = "Y" ] ; then
            _get_cropdetection "${SOURCEFILE}"
            _add_video_filter "${CROPADJ}"
            WIDTH=$(echo "${CROPADJ}" | cut -d= -f2 | cut -d: -f1)
            HEIGHT=$(echo "${CROPADJ}" | cut -d= -f2 | cut -d: -f2)
            DAR="(${WIDTH}/${HEIGHT})*${SAR}"
        else
            _get_width "${SOURCEFILE}"
            _get_height "${SOURCEFILE}"
            _get_dar "${SOURCEFILE}"
        fi

        #Set options for zeroing timecode if input is MXF
        if [[ "$INPUT" == *.mxf ]] ; then
            metadata_option="-metadata"
        else metadata_option="-metadata:s:v:0"
        fi

        # if adding a slate then request metadata
        MEDIAID4SLATE=$(_readingestlog "media ID slate")
        if [ "${ADDSLATE}" = "Y" ] ; then
            if [ -z "${MEDIAID4SLATE}" ] ; then
                cowsay "MediaID?"
                echo -n ":: "
                read MEDIAID4SLATE
            fi

            SERIESTITLE=$(_readingestlog "Series Title")
            if [ -z "${SERIESTITLE}" ] ; then
                cowsay -t "Series Title?"
                echo -n ":: "
                read SERIESTITLE
            fi

            EPISODETITLE=$(_readingestlog "Episode Title")
            if [ -z "${EPISODETITLE}" ] ; then
                cowsay -s "Episode Title?"
                echo -n ":: "
                read EPISODETITLE
            fi

                SLATE_MEDIAID=$(_maketemp)
                echo "${MEDIAID4SLATE}" > "${SLATE_MEDIAID}"

                SLATE_SERIES=$(_maketemp)
                echo "${SERIESTITLE}" > "${SLATE_SERIES}"

                SLATE_EPISODE=$(_maketemp)
                echo "${EPISODETITLE}" > "${SLATE_EPISODE}"

                SLATE_DURATION=$(_maketemp)
                echo "${BROADCASTDURATION}" > "${SLATE_DURATION}"

                SLATE_CH1=$(_maketemp)
                echo "Ch. 1 Stereo L" > "${SLATE_CH1}"

                SLATE_CH2=$(_maketemp)
                echo "Ch. 2 Stereo R" > "${SLATE_CH2}"

                SLATE_CH3=$(_maketemp)
                echo "Ch. 3 Mono Mix" > "${SLATE_CH3}"

                SLATE_CH4=$(_maketemp)
                echo "Ch. 4 Mono Mix" > "${SLATE_CH4}"

            COLORBARS_SECS=60
            SLATE_SECS=20
            COUNTDOWN_SECS=8.2
            BLACK_SECS=1.8
            END_BLACK_SECS=30
            fontfile="/System/Library/Fonts/HelveticaNeue.dfont"
            fontenable="enable=gte(t\,${COLORBARS_SECS})*lt(t\,${COLORBARS_SECS}+${SLATE_SECS})"
            MIDDLEOPTIONS+=(-f lavfi -i "smptehdbars=s=1920x1080:r=30000/1001:sar=16/9:d=${COLORBARS_SECS}" \
        -f lavfi -i "aevalsrc=0.1*sin(1000*2*PI*t):d=${COLORBARS_SECS}:s=48000:c=stereo" \
        -f lavfi -i "color=c=BlueViolet:s=1920x1080:r=30000/1001:sar=16/9:d=${COUNTDOWN_SECS},geq=r='X/W*r(X,Y)':g='(1-X/W)*g(X,Y)':b='(H-Y)/H*b(X,Y)'" \
        -f lavfi -i "aevalsrc=0:d=${SLATE_SECS}:s=48000:c=stereo" \
        -f lavfi -i "color=black:s=1920x1080:r=30000/1001:sar=16/9:d=${COUNTDOWN_SECS}" \
        -f lavfi -i "sine=r=48000:frequency=1:beep_factor=400:duration=${COUNTDOWN_SECS}"\
        -f lavfi -i "color=black:s=1920x1080:r=30000/1001:sar=16/9:d=${BLACK_SECS}" \
        -f lavfi -i "aevalsrc=0:d=${BLACK_SECS}:s=48000:c=stereo"\
        -f lavfi -i "color=black:s=1920x1080:r=30000/1001:sar=16/9:d=${END_BLACK_SECS}" \
        -f lavfi -i "aevalsrc=0:d=${END_BLACK_SECS}:s=48000:c=stereo")
            MIDDLEOPTIONS+=("$metadata_option" timecode=00:58:30\;00)
        else
            MIDDLEOPTIONS+=("$metadata_option" timecode=00:00:00.00)
        fi
        # determine filter choice if set in capture.log and set in and out times if used, ignore out time if a slate is being created.
        if [[ -f "${INGESTLOG}" && "${ISOBJECT}" = "Y" ]] ; then
            if [ "${FORMULA}" = "none" ] ; then
                FILTERCHOICE=$(_readingestlog "filter choice")
                _add_video_filter "${FILTERCHOICE}"
                echo  "${FILTERCHOICE}"
            fi
            INTIME=$(_readingestlog "intime")
            OUTTIME=$(_readingestlog "outtime")
            if [[ "${INTIME}" ]] ; then
                _report -dt "ATTENTION: Transcoding will use intime (${INTIME}) during transcoding."
                INPUTOPTIONS+=(-seek_timestamp 1)
                MIDDLEOPTIONS+=(-ss "${INTIME}")
            fi
            if [[ "${OUTTIME}" && "${ADDSLATE}" = "Y" ]] ; then
                _report -dt "ATTENTION: Transcoding will NOT use outtime (${OUTTIME}) during transcoding, as there is a slate being created for this file."
            elif [[ "${OUTTIME}" && "${ADDSLATE}" != "Y" ]] ; then
                _report -dt "ATTENTION: Transcoding will use outtime (${OUTTIME}) during transcoding."
                MIDDLEOPTIONS+=(-to "${OUTTIME}")
            fi
        fi

        if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
            #options for either xdcam or imx
            MIDDLEOPTIONS+=(-r ntsc)
            MIDDLEOPTIONS+=(-c:v mpeg2video)
            MIDDLEOPTIONS+=(-intra_vlc 1)
            MIDDLEOPTIONS+=(-non_linear_quant 1)
            MIDDLEOPTIONS+=(-qmin 1)
            MIDDLEOPTIONS+=(-dc 10)
            MIDDLEOPTIONS+=(-lmin QP2LAMBDA)
            MIDDLEOPTIONS+=(-ps 1)
            MIDDLEOPTIONS+=(-flags +ildct+ilme)
            MIDDLEOPTIONS+=(-pix_fmt yuv422p)
            MIDDLEOPTIONS+=(-top 1)
            MIDDLEOPTIONS+=(-mpv_flags strict_gop)
            MIDDLEOPTIONS+=(-drop_frame_timecode 1)

            #xdcam options
            MIDDLEOPTIONSXDCAM+=(-s 1920x1080)
            MIDDLEOPTIONSXDCAM+=(-vtag xd5b)
            MIDDLEOPTIONSXDCAM+=(-aspect 16:9)
            MIDDLEOPTIONSXDCAM+=(-q:v 1)
            MIDDLEOPTIONSXDCAM+=(-qmax 8)
            MIDDLEOPTIONSXDCAM+=(-g 15)
            MIDDLEOPTIONSXDCAM+=(-bf 2)
            MIDDLEOPTIONSXDCAM+=(-b:v 50M)
            MIDDLEOPTIONSXDCAM+=(-maxrate:v 50M)
            MIDDLEOPTIONSXDCAM+=(-minrate:v 50M)
            MIDDLEOPTIONSXDCAM+=(-bufsize 17825792)
            MIDDLEOPTIONSXDCAM+=(-rc_init_occupancy 17825792)

            # imx options
            MIDDLEOPTIONSIMX+=(-aspect 4:3)
            MIDDLEOPTIONSIMX+=(-qmax 12)
            MIDDLEOPTIONSIMX+=(-g 1)
            MIDDLEOPTIONSIMX+=(-top 1)
            MIDDLEOPTIONSIMX+=(-intra)
            MIDDLEOPTIONSIMX+=(-b:v 30M)
            MIDDLEOPTIONSIMX+=(-maxrate:v 30M)
            MIDDLEOPTIONSIMX+=(-minrate:v 30M)
            MIDDLEOPTIONSIMX+=(-bufsize 1001000)
            MIDDLEOPTIONSIMX+=(-rc_init_occupancy 1001000)
            MIDDLEOPTIONSIMX+=(-rc_max_vbv_use 1)
            MIDDLEOPTIONSIMX+=(-rc_min_vbv_use 1)
            MIDDLEOPTIONSIMX+=(-rc_buf_aggressivity 0.25)
            MIDDLEOPTIONSIMX+=(-vbsf imxdump)
            MIDDLEOPTIONSIMX+=(-tag:v mx3n)

            # decide on an output codec, aspect ratio, and padding strategy
            DARRATIO=$(echo "scale=3 ; ${DAR}" | bc)
            if [ "${FORMULA}" = "tff" ] ; then
                _add_video_filter "setfield=tff"
            elif [ "${FORMULA}" = "bff" ] ; then
                _add_video_filter "setfield=bff"
            fi
            _add_video_filter "fieldorder=tff"
            if [ "${FORMULA}" = "hds" ] ; then
                _add_video_filter "scale=size=hd1080:interl=1"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=16/9"
                _add_video_filter "fps=fps=ntsc"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
            elif [ "${FORMULA}" = "sds" ] ; then
                _add_video_filter "scale=720:480"
                _add_video_filter "pad=720:512:0:24"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=4/3"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
            elif [ "${DARRATIO}" = "1.777" -a ! "${CROPDETECT}" = "Y" ] ; then
                _add_video_filter "scale=size=hd1080:interl=1"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=16/9"
                _add_video_filter "fps=fps=ntsc"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
            elif [ $(echo "scale=3 ; ${DARRATIO} > (16/9)" | bc -l) = 1 ] ; then
                _add_video_filter "pad=${WIDTH}:${WIDTH}*(9/16)*(${SAR}):(ow-${WIDTH})/2:(oh-${HEIGHT})/2"
                _add_video_filter "scale=size=hd1080:interl=1"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=16/9"
                _add_video_filter "fps=fps=ntsc"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
            elif [ $(echo "scale=3 ; $DARRATIO > (3/2)" | bc -l) = 1 -o "${ADDSLATE}" = "Y" ] ; then
                _add_video_filter "pad=${HEIGHT}*(16/9)/(${SAR}):${HEIGHT}:(ow-${WIDTH})/2:(oh-${HEIGHT})/2"
                _add_video_filter "scale=size=hd1080:interl=1"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=16/9"
                _add_video_filter "fps=fps=ntsc"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSXDCAM[@]}")
            elif [ "${WIDTH}" = "720" -a "${HEIGHT}" = "480" -a $(echo "scale=3 ; ${DARRATIO} < (3/2)" | bc -l) = 1 -a ! "${CROPDETECT}" = "Y" ] ; then
                _add_video_filter "scale=720:480"
                _add_video_filter "pad=720:512:0:24"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=4/3"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
            elif [ "${HEIGHT}" -eq "486" -a "${WIDTH}" -eq "720" ] ; then
                _add_video_filter "crop=720:484:0:0"
                _add_video_filter "pad=720:512:0:28"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=4/3"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
            elif  [ "${HEIGHT}" -eq "512" -a "${WIDTH}" -eq "720" ] ;then
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=4/3"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
            else
                _add_video_filter "scale=720:480"
                _add_video_filter "pad=720:512:0:24"
                _add_video_filter "setsar=1/1"
                _add_video_filter "setdar=4/3"
                MIDDLEOPTIONS+=("${MIDDLEOPTIONSIMX[@]}")
            fi
        fi
        _add_video_filter "format=yuv422p"
        _add_video_filter "lut=y=if(gt(val\,235)\,235\,val):u=if(gt(val\,235)\,235\,val):v=if(gt(val\,235)\,235\,val)"
    fi

    if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
        _get_audio_index "${SOURCEFILE}"
        _get_audio_mapping -bv "${SOURCEFILE}"
        MIDDLEOPTIONS+=("${AUDIOMAPPING_FFMPEG[@]}")
        # add audio options
        MIDDLEOPTIONS+=(-acodec pcm_s24be)
        MIDDLEOPTIONS+=(-ar 48k)
    fi
    # set input options for ffmpeg
    _get_codectagstring "${SOURCEFILE}"
    INPUTOPTIONS+=(-y)
    INPUTOPTIONS+=(-nostdin)
    if [[ "${CODEC_TAG_STRING}" == "mjp2" ]] ; then
         INPUTOPTIONS+=(-vcodec libopenjpeg)
    fi

    # log process
    _prep_ffmpeg_log
    if [ "${CONCATSOURCE}" != "" ] ; then
        FFMPEGINPUT="${CONCATSOURCE}"
    fi

    # slate process
    if [ "${ADDSLATE}" = "Y" ] ; then
        _add_video_filter "copy[program_video]"
        _add_audio_filter "[1:v:0][2:a:0][3:v:0][4:a:0][5:v:0][6:a:0][7:v:0][8:a:0]concat=n=4:v=1:a=1[slate_v][slate_a];\
[slate_v]\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=158:textfile=${SLATE_MEDIAID},\
drawtext=fontsize=80:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=340:textfile=${SLATE_SERIES},\
drawtext=fontsize=50:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=460:textfile=${SLATE_EPISODE},\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=793:text='VIDEO',\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=831:text='1080i',\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=388:y=869:text='59.94DF',\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=790:y=793:text='AUDIO',\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=790:y=831:textfile=${SLATE_CH1},\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=790:y=869:textfile=${SLATE_CH2},\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=790:y=908:textfile=${SLATE_CH3},\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=790:y=947:textfile=${SLATE_CH4},\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=1151:y=908:text='Duration',\
drawtext=fontsize=32:fontfile=${fontfile}:fontcolor=white:${fontenable}:x=1151:y=947:textfile=${SLATE_DURATION},\
drawtext=fontsize=420:fontfile=${fontfile}:fontcolor=white:enable=gte(t\,${COLORBARS_SECS}+${SLATE_SECS})*lt(t\,${COLORBARS_SECS}+${SLATE_SECS}+${COUNTDOWN_SECS}):x=(w-text_w)/2:y=(h-text_h-line_h)/2:text='%{eif\:${COLORBARS_SECS}+${SLATE_SECS}+11-t\:d}',\
scale=size=hd1080,format=yuv422p,setsar=1/1,setdar=16/9,fps=fps=ntsc[slate_v1];[slate_a]asplit[slate_stereo1][slate_stereo2];[slate_stereo2]aformat=channel_layouts=mono,asplit[slate_mono1][slate_mono2];\
[9:v:0]format=yuv422p,setsar=1/1,setdar=16/9[end_black];\
[10:a:0]asplit[end_stereo1][end_stereo2];[end_stereo2]aformat=channel_layouts=mono,asplit[end_mono1][end_mono2];\
[slate_v1][slate_stereo1][slate_mono1][slate_mono2][program_video][stereo1][mono1][mono2][end_black][end_stereo1][end_mono1][end_mono2]concat=n=3:v=1:a=3[with_slate_video][with_slate_stereo1][with_slate_mono1][with_slate_mono2]"
MIDDLEOPTIONS+=(-map "[with_slate_video]" -map "[with_slate_stereo1]" -map "[with_slate_mono1]" -map "[with_slate_mono2]")
    fi

    _filter_to_middle_option
#    MIDDLEOPTIONS+=(-metadata comment="INPUTOPTIONS: ${INPUTOPTIONS[@]}
#FFMPEGINPUT: ${FFMPEGINPUT}
#MIDDLEOPTIONS: ${MIDDLEOPTIONS[@]}
#OUTPUT: ${OUTPUT}")

    _run_critical_event ffmpeg "${INPUTOPTIONS[@]}" "${FFMPEGINPUT[@]}" "${MIDDLEOPTIONS[@]}" "${OUTPUT}"
    echo
    _lookup_final_loudness
    _summarize_make
    _deliver_output "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
    _log -e
done
unset ADDSLATE

