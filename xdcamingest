#!/bin/bash
# xdcamingest
# ingest an xdcam disc, make a package, and deliver select files
scriptdir=`dirname "$0"`
. "$scriptdir/mmvariables"
. "$scriptdir/mmfunctions"
[ ! -f "$scriptdir/mmvariables" -o ! -f "$scriptdir/mmfunctions" ] && { report -wt "Missing '$scriptdir/mmvariables' and/or '$scriptdir/mmfunctions'. Exiting." ; exit 1 ;};

cleanup(){
	log -a "Process aborted"
	exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM
log -b

usage(){
	echo
	echo "$(basename $0) ${version}"
	echo "This script may be run interactively by running it with no arguments or may be used with the following options."
	echo "Usage: $(basename $0) [ -c ingest_xd_cam ]"
	echo "  -c ingestxdcam"
	exit
}

# command-line options to set mediaid and original variables
while getopts ":hm:f:p:a:w:y:x" opt; do
	case "$opt" in
		h) usage ;;
		c) OUTDIR_INGESTXDCAM="$OPTARG" ;;
		\?) report -w "Invalid option: -$OPTARG" ; exit 1 ;;
		:) report -w "Option -$OPTARG requires an argument" ; exit 1 ;;
	esac
done

[ ! -d "$OUTDIR_INGESTXDCAM" ] && report -w "The XD Cam processing directory must be set. Use [ -p /path/to/XDCam/processing/directory ]." && exit 1

defaults write com.apple.desktopservices DSDontWriteNetworkStores true

while true ; do

	# check to make sure there is only 1 XDCam deck with mounted disk attached.
	xdcam_count=`find /Volumes -name 'XDCAM*' -maxdepth 1 | wc -l | awk '{print $1}'`
	while [ $xdcam_count -ne 1 ]; do
		if [ $xdcam_count -gt 1 ]; then
			report -wt "More than 1 XDCam deck appears to be mounted, please connect only one."
			exit 3
		else
			report -qn "${RED}No XDCam disk found. Check deck connection. Click return to continue or 'q' to quit: "
			read ok
			if [ "$ok" == "q" ]; then
				exit 0
			fi
		fi
		xdcam_count=`find /Volumes -name 'XDCAM*' -maxdepth 1 | wc -l | awk '{print $1}'`
	done

	#identify deck
	xdcam_mount=`find /Volumes -name 'XDCAM*' -maxdepth 1`
	deck1=`basename "$xdcam_mount"`
	report -dt "Found the XDCAM deck: ${deck1}"

	report -qn "${GREEN}Scan the barcode1, type 1st media_id, or 'q' to quit: "
	read barcode1
	if [ "$barcode1" == "q" ]; then
		exit 0
	fi
	report -qn "${GREEN}Scan the barcode2, type 2nd media_id, or 'q' to quit or leave blank if there is no second barcode: "
	read barcode2
	if [ "$barcode2" == "q" ]; then
		exit 0
	fi

	report -qn "${GREEN}Enter the name of the operator or 'q' to quit: "
	read op
	if [ "$op" == "q" ]; then
		exit 0
	fi

	# there are two types of barcodes accepted
	# a. A 58 byte barcode that contains mediaid, deviceid, starttime, and duration
	# b. A mediaid-only barcode (other values will be requested).
	if [ "$(echo ${#barcode1})" -eq 58 ] ; then
		# process barcodes with barcode_interpret and parse results into pieces
		barcode_values1=`${scriptdir}/barcodeinterpret $barcode1`
		deviceid1=`echo $barcode_values1 | cut -d , -f 2`
		materialid1=`echo $barcode_values1 | cut -d , -f 4`
		som1=`echo $barcode_values1 | cut -d , -f 6`
		duration1=`echo $barcode_values1 | cut -d , -f 8`

		if [ "$barcode2" != "" ] ; then
			barcode_values2=`${scriptdir}/barcodeinterpret $barcode2`
			deviceid2=`echo $barcode_values2 | cut -d , -f 2`
			materialid2=`echo $barcode_values2 | cut -d , -f 4`
			som2=`echo $barcode_values2 | cut -d , -f 6`
			duration2=`echo $barcode_values2 | cut -d , -f 8`
		fi
	else
		# use the barcode for mediaid and deviceid and request other values
		materialid1="$barcode1"
		deviceid1="$barcode1"
		report -qn "BARCODE 1 - Enter start of media in HH:MM:SS:FF format or 'q' to quit: "
		read som1
		if [ "$som1" == "q" ]; then
			exit 0
		fi
		report -qn "BARCODE 1 - Enter duration of media in HH:MM:SS:FF format or 'q' to quit: "
		read duration1
		if [ "$duration1" == "q" ]; then
			exit 0
		fi
		if [ "$barcode2" != "" ] ; then
			materialid2="$barcode2"
			deviceid2="$barcode2"
			report -qn "BARCODE 2 - Enter start of media in HH:MM:SS:FF format or 'q' to quit: "
			read som2
			if [ "$som2" == "q" ]; then
				exit 0
			fi
			report -qn "BARCODE 2 - Enter duration of media in HH:MM:SS:FF format or 'q' to quit: "
			read duration2
			if [ "$duration2" == "q" ]; then
				exit 0
			fi
		fi
	fi

	# report results of barcode scanning
	echo
	echo ----------------------------------
	echo deviceid1 is   $deviceid1
	echo materialid1 is $materialid1
	echo som1 is        $som1
	echo duration1 is   $duration1
	if [ "$barcode2" != "" ] ; then
		echo deviceid2 is $deviceid2
		echo materialid2 is $materialid2
		echo som2 is $som2
		echo duration2 is $duration2
	fi
	echo ----------------------------------
	PS3="Do you values look correct? "
	eval set "'Yes' 'No'"
	select option in "$@"
	do
		break
	done
	if [ "$option" != "Yes" ] ; then
		echo Start Over
		echo
	else
		# check for existing output
		if [ -d "$OUTDIR_INGESTXDCAM/$deviceid1" ] ; then
			report -dt "It looks like $deviceid1 was already ingested. If you want to overwrite the existing one please delete $OUTDIR_INGESTXDCAM/$deviceid1 first and then try again."
		else
			# start xdcam ingest process
			start=`date -u "+%Y%m%dT%H%M%SZ"`
			mkdir -p "$OUTDIR_INGESTXDCAM/$deviceid1/object"
			report -dt "copying disc..."
			rsync -a --stats --progress --log-file="$OUTDIR_INGESTXDCAM/$deviceid1/object/cp.log" "/Volumes/${deck1}" "$OUTDIR_INGESTXDCAM/$deviceid1/object/"
			end=`date -u "+%Y%m%dT%H%M%SZ"`
			hdiutil eject "/Volumes/${deck1}"

			mxffile=`find "${OUTDIR_INGESTXDCAM}/${deviceid1}/object/${deck1}/Clip" -name "*.MXF"`
			if [[ `echo "$mxffile" | wc -l | sed 's/ //g'` > 1 ]] ; then
				echo error. The clip directory of "$deviceid1" has more than 1 MXF file.
				exit 1
			fi

			# test for data track
			hasdata1=`if [ $(ffprobe -show_streams "$mxffile" 2>&1 | grep codec_type=data | wc -l) = 0 ] ; then echo no; else echo yes; fi`

			# start reporting to operator log
			echo "datetime_start: ${start}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "datetime_end: ${end}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "operator: ${op}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "deck: ${deck1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "barcode.1: ${barcode1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "deviceid.1: ${deviceid1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "materialid.1: ${materialid1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "som.1: ${som1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "duration.1: ${duration1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "mxffile.1: ${mxffile}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			echo "hasdata.1: ${hasdata1}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			if [ "$barcode2" != "" ] ; then
				echo "barcode.2: ${barcode2}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
				echo "deviceid.2: ${deviceid2}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
				echo "materialid.2: ${materialid2}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
				echo "som.2: ${som2}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
				echo "duration.2: ${duration2}" >> "$OUTDIR_INGESTXDCAM/$deviceid1/object/op.log"
			fi

			# make and deliver broadcast version
			report -dt "making omneon version..."
			mezzfiledir="${OUTDIR_INGESTXDCAM}/${deviceid1}/broadcast_version"
			mkdir -p "$mezzfiledir"
			report -dt "running make_mezz_for_xdcam $som1 $duration1 $mxffile $mezzfiledir/${materialid1}.mxf"
			make_mezz_for_xdcam "$som1" "$duration1" "$mxffile" "$mezzfiledir/${materialid1}.mxf"
			report -dt "starting to ftp the broadcast file for "${materialid1}" to the Omneon..."
			"${scriptdir}/uploadomneon" "$mezzfiledir/${materialid1}.mxf"

			if [ "$barcode2" != "" ] ; then
				report -dt "running make_mezz_for_xdcam $som2 $duration2 $mxffile $mezzfiledir/${materialid2}.mxf"
				make_mezz_for_xdcam "$som2" "$duration2" "$mxffile" "$mezzfiledir/${materialid2}.mxf"
				report -dt "starting to ftp the broadcast file for "${materialid2}" to the Omneon..."
				"${scriptdir}/uploadomneon" "$mezzfiledir/${materialid2}.mxf"
			fi

			report -dt "starting initial checksum and packaging..."
			bag baginplace "${OUTDIR_INGESTXDCAM}/${deviceid1}"

			report -dt "done with $deviceid1 at `date`"
		fi
	fi
done
log -e
