#!/bin/bash
# ingestfile
# select an audiovisual file, package it, and transcode it
VERSION="1.0"
REQUIRECONFIG="Y"
DOCHECKSUMS="Y"
FORMULA=""
INTIME=""
OUTTIME=""
CLEANUP_CHOICE="N"
MAKEACCESSCOPIES="Y"       # use 'Y' for yes or any other character for no
BLACKFRAMETEST="Y"         # use 'Y' for yes or any other character for no
PHASECHECKTEST="Y"         # use 'Y' for yes or any other character for no
DELIVERYTOOMNEON="Y"       # use 'Y' for yes or any other character for no
DELIVERACCESSCOPIES="Y"    # use 'Y' for yes or any other character for no
DELIVERYTOAIPSTORAGE="Y"   # use 'Y' for yes or any other character for no
EDIT_MODE="Y"

QUEUEFILE="${HOME}/Desktop/queue.txt"
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This script will run an interactive interview and then process an input file accordingly."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename ${0}) [ -options ]"
    echo "   default uses a graphical user interface for interactive component of inputing file and media ID, setting volume adjustment, formula, and slate creation."
    echo "  -e Uses the terminal interface for interactive component of inputing file and Media ID, volume adjustment, formula, and slate creation."
    echo "  -p Preservation mode- to be used when packaging digitized material and digitization logs. Does not make any deliveries, and creates the package in the same directory as the input."
    echo "  -n (do not make any deliveries except for sending the final package to ${AIP_STORAGE}.)"
    echo "  -i PSA Mode- to be used when packaging PSA files. Does not make any deliveries except for sending the final package to ${DELIVERYTOOMNEON}."
    echo "  -h display this help"
    echo
    exit
}

user_input="${*}"
OPTIND=1

while getopts ":F:pnhei" OPT ; do
    case "${OPT}" in
        F) FORMULA="${OPTARG}";;
        e) EDIT_MODE="N" ;;
        p) PRESERVATION_MODE="Y" ; DELIVERYTOOMNEON="N" ; DELIVERACCESSCOPIES="N" ; DELIVERYTOAIPSTORAGE="N" ;;
        n) DELIVERYTOOMNEON="N" ; DELIVERACCESSCOPIES="N" ;;
        i) DELIVERYTOOMNEON="Y" ; DELIVERACCESSCOPIES="N" ; DELIVERYTOAIPSTORAGE="Y" ;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ;  _writeerrorlog "ingestfile" "You used an invalid option and the script had to exit" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

#local functions
_add_mediaid_to_queue(){
    [ -n "${MEDIAID}" ] || { _report -wt "Error: mediaid is undefined in add_media_to_queue function" ; _writeerrorlog "_add_mediaid_to_queue" "The media id is undefined in the _add_mediaid_to_queue function, and caused the script to exit." ; exit 1 ;};
    [ -n "${QUEUEFILE}" ] || { _report -wt "Error: queuefile is undefined in add_media_to_queue function" ; _writeerrorlog "_add_mediaid_to_queue" "The queuefile is undefined in the _add_mediaid_to_queue function, and caused the script to exit." ; exit 1 ;};
    echo "${MEDIAID}" >> "${QUEUEFILE}"
}

_remove_mediaid_from_queue(){
    [ -n "${MEDIAID}" ] || { _report -wt "Error: mediaid is undefined in remove_media_from_queue function" ; _writeerrorlog "_remove_mediaid_from_queue" "The media id is undefined in the _remove_mediaid_from_queue function, and caused the script to exit." ; exit 1 ;};
    [ -f "${QUEUEFILE}" ] || { _report -wt "Error: queuefile is undefined in remove_media_from_queue function" ; _writeerrorlog "_remove_mediaid_from_queue" "The queuefile is undefined in the _remove_mediaid_from_queue function, and caused the script to exit." ; exit 1 ;};
    grep -v "^${MEDIAID}$" "${QUEUEFILE}" | grep "^[A-Z0-9_-]\+$" > "${QUEUEFILE}_tmp"
    rm "${QUEUEFILE}"
    mv "${QUEUEFILE}_tmp" "${QUEUEFILE}"
}

_cleanup(){
    _log -a "Process aborted"
    _remove_mediaid_from_queue
    [ -d "${OUTDIR_INGESTFILE}/${MEDIAID}" ] && mv "${OUTDIR_INGESTFILE}/${MEDIAID}" "${OUTDIR_INGESTFILE}/${MEDIAID}_aborted_ingest_$(_get_iso8601_c)"
    exit 1
}

trap _cleanup SIGHUP SIGINT SIGTERM

# check environment
if [ -d "$(pwd)" ] ; then
    echo ":)"
else
    _report -w "you're in a directory that doesn't actually exist. The script exited and you need to cd into a different directory. ¯\_(ツ)_/¯ "
    exit 1
fi
[ -z "${OUTDIR_INGESTFILE}" ] && { echo "The processing directory must be set. Use [ -p /path/to/processing/directory ] or run mmconfig to set OUTDIR_INGESTFILE." ; exit 1 ;};
[ -z "${AIP_STORAGE}" ] && { echo "The AIP Storage directory must be set. Use [ -a /path/to/AIP/storage/directory ] or run mmconfig to set AIP_STORAGE." ; exit 1 ;};
[ -z "${PODCASTDELIVER}" ] && { echo "A directory for podcast delivery must be set. Use [ -w /path/to/deliver/podcastfiles] or run mmconfig to set PODCASTDELIVER." ; exit 1 ;};
[ -z "${YOUTUBEDELIVER}" ] && { echo "A directory for youtube delivery must be set. Use [ -y /path/to/deliver/youtubefiles] or run mmconfig to set YOUTUBEDELIVER." ; exit 1 ;};


#pashua interface settings
CONF="
# Set transparency: 0 is transparent, 1 is opaque
*.transparency=1.00

# Set window title
*.title = Ingest File

# intro text
intro.x = 20
intro.y = 600
intro.width = 500
intro.type = text
intro.text = Ingest file options. Leave the option blank to be prompted.

# ask operator
OP.x = 20
OP.y = 540
OP.type = textfield
OP.label = Please enter your name:
OP.width = 270

# Media ID
MEDIAID.x = 20
MEDIAID.y = 480
MEDIAID.type = textfield
MEDIAID.label = Please enter a unique MEDIA ID:
MEDIAID.width = 270

# Input file
INPUT.x = 20
INPUT.y = 420
INPUT.type = openbrowser
INPUT.label = Select your file:
INPUT.width=400

# Audio Strategy
AUDIODECISION.x = 20
AUDIODECISION.y = 360
AUDIODECISION.type = combobox
AUDIODECISION.label = Select an audio strategy:
AUDIODECISION.default = Default audio mapping [first audio track used for stereo output]
AUDIODECISION.option =
AUDIODECISION.option = Default audio mapping [first audio track used for stereo output]
AUDIODECISION.option = Only use left of the first audio track [for 21st Century]
AUDIODECISION.option = Only use right of the first audio track
AUDIODECISION.width = 400

# Cropping Strategy
CROPDECISION.x = 20
CROPDECISION.y = 300
CROPDECISION.type = combobox
CROPDECISION.label = Select a cropping strategy:
CROPDECISION.default = Do not crop
CROPDECISION.option =
CROPDECISION.option = Do not crop
CROPDECISION.option = Examine the video and auto-crop out black borders (slower)
CROPDECISION.width = 400

# Adding Slate
SLATE.x = 20
SLATE.y = 240
SLATE.type = combobox
SLATE.label = Do you want to create a service copy with a slate?
SLATE.option = Yes
SLATE.option = No
SLATE.width = 100

# Optional Formula
FORMULA.x = 20
FORMULA.y = 180
FORMULA.type = combobox
FORMULA.label = Select an optional formula for unusual cases. In most cases select none.
FORMULA.tooltip = To force the input file to be interpreted as top or bottom field first interlacement, select tff or bff. To stretch the input video to 1920x1080 HD frame size, select 'HDS'.
FORMULA.default = none
FORMULA.option =
FORMULA.option = none
FORMULA.option = check interlacement
FORMULA.option = tff
FORMULA.option = bff
FORMULA.option = hds
FORMULA.option = sds
FORMULA.width = 100

# Cleanup Strategy
CLEANUPDECISION.x = 20
CLEANUPDECISION.y = 120
CLEANUPDECISION.type = combobox
CLEANUPDECISION.label = Select a cleanup strategy
CLEANUPDECISION.default = Leave source file where it is
CLEANUPDECISION.option =
CLEANUPDECISION.option = Leave source file where it is
CLEANUPDECISION.option = Remove source file after successful ingest
CLEANUPDECISION.width = 300

# multitasking strategy
PRIORITY.x = 20
PRIORITY.y = 60
PRIORITY.type = combobox
PRIORITY.label = Would you like to put it in the queue or start now?
PRIORITY.default = put in queue
PRIORITY.option =
PRIORITY.option = put in queue
PRIORITY.option = start now
PRIORITY.width = 125

# Add a cancel button with default label
cb.type=cancelbutton

";

# edit mode
if [ "${EDIT_MODE}" == "Y" ] ; then
    PASHUA_CONFIGFILE=`/usr/bin/mktemp /tmp/pashua_XXXXXXXXX`
    echo "${CONF}" > "${PASHUA_CONFIGFILE}"
    _pashua_run
    rm "${PASHUA_CONFIGFILE}"
    echo "  OPERATOR = ${OP}"
    echo "  INPUT = ${INPUT}"
    echo "  MEDIAID = ${MEDIAID}"
    echo "  AUDIODECISION = ${AUDIODECISION}"
    echo "  CROPDECISION = ${CROPDECISION}"
    echo "  SLATE = ${SLATE}"
    echo "  FORMULA = ${FORMULA}"
    echo "  CLEANUPDECISION = ${CLEANUPDECISION}"
    echo "  PRIORITY = ${PRIORITY}"
    echo ""
fi

if [[ "${cb}" -eq 1 ]] ; then
    exit 1
fi

if
    [ ! -z $(echo "${MEDIAID}" | grep -v "^[A-Z0-9_-]*$") ] ; then
    echo "ERROR The MEDIA ID must only contain capital letters, numbers, hyphen and underscore"
    echo "Please reenter valid ID"
    MEDIAID=""
    _ask_mediaid
fi

    # interview the operator
    _ask_operator
    _ask_mediaid

    ## check for existing output
    if [ -d "${OUTDIR_INGESTFILE}/${MEDIAID}" ] ; then
        _report -wt "It looks like ${MEDIAID} was already ingested. If you want to overwrite the existing one please delete ${OUTDIR_INGESTFILE}/${MEDIAID} first and then try again."
        exit 1
    fi
    if [ -d "${AIP_STORAGE}/${MEDIAID}" ] ; then
        _report -wt "It looks like ${MEDIAID} was already ingested. If you want to overwrite the existing one please delete ${AIP_STORAGE}/${MEDIAID} first and then try again."
        exit 1
    fi
    _ask_input

    # Check if file is being modified
    INPUT_DATE=$(getfileinfo "${INPUT}" | grep modified | cut -d' ' -f2-)
    CURRENT_DATE=$(date -j "+%m/%d/%Y %H:%M:%S")
    if [ "${INPUT_DATE}" = "${CURRENT_DATE}" ] ; then
        _report -w "WARNING: Input is currently being modified. Exiting."
        exit 1
    fi
    #here is where we would insert an option for searching for  directory.
    if [ ! $(_is_video "${INPUT}") ] ; then
        _report -qnt "WARNING: ${INPUT} is not recognized as a video file. Please press q to quit, any other key to continue (if you know what you're doing): "
        read NOTVIDRESPONSE
        [ "${NOTVIDRESPONSE}" == "q" ] && exit 0
    fi
    if [ "${AUDIODECISION}" = "" ] ; then
        _report -q "Select an audio strategy? "
        PS3="Selection? "
        select AUDIODECISION in "Default audio mapping [first audio track used for stereo output]" "Only use left of the first audio track [for 21st Century]" "Only use right of the first audio track"
        do
            break
        done
    fi

    if [ "${CROPDECISION}" = "" ] ; then
        _report -q "Select a cropping strategy? "
        PS3="Selection? "
        select CROPDECISION in "Do not crop." "Examine the video and auto-crop out black borders (slower)"
        do
            break
        done
    fi

    if [ "${FORMULA}" = "" ] ; then
        _report -q "Select an optional formula for unusual cases? "
        _report -d "In most cases, select 'none'. To force the input file to be interpreted as top or bottom field first interlacement, select tff or bff. To stretch the input video to 1920x1080 HD frame size, select 'hds'. To squish into Standard Definition, select 'sds'."
        PS3="Selection? "
        select FORMULA in "none" "check interlacement" "tff" "bff" "hds" "sds"
        do
            break
        done
    fi

    if [ "${CLEANUPDECISION}" = "" ] ; then
        _report -q "Select a cleanup strategy? "
        PS3="Selection? "
        select CLEANUPDECISION in "Leave source file where it is." "Remove source file after successful ingest"
        do
            break
        done
    fi
    if [ "${CLEANUPDECISION}" = "Remove source file after successful ingest" ] ; then
        CLEANUP_CHOICE="Y"
    else
        CLEANUP_CHOICE="N"
    fi

    if [ "${PRIORITY}" = "" ] ; then
        _report -q "Select a multitasking strategy? "
        PS3="Selection? "
        select PRIORITY in "put in queue" "start now"
        do
            break
        done
    fi

    if [ "${SLATE}" = "" ] ; then
        _report -q "Do you want to create a service copy with a slate? "
        PS3="Selection? "
        select SLATE in "Yes" "No"
        do
            break
        done
    fi

if [ "${SLATE}" = "Yes" ] ; then
    SLATE_CHOICE="Y"
else
    SLATE_CHOICE="N"
fi

if [ "${SLATE_CHOICE}" == "Y" ] ; then

    cowsay -t "Series Title?"
    echo -n ":: "
    read SERIESTITLE

    cowsay -s "Episode Title?"
    echo -n ":: "
    read EPISODETITLE

    MEDIAID4SLATE="${MEDIAID}"
fi

# blackframe analysis, in/out time settings requests, ask for digitization logs
if [ "${PRESERVATION_MODE}" == "Y" ] ; then
    _reset_directory
    _ask_intime
    _ask_outtime
    _ask_digitization_logs
    PHASECHECKTEST="N"

else
    if [ "${BLACKFRAMETEST}" = "Y" ] ; then
        _black_at_ends "${INPUT}"
        if [ "${HEAD_BLACK}" -gt "30" ] ; then
            _report -wt "WARNING - There are at least ${HEAD_BLACK} frames of black at the beginning of ${INPUT}"
            _report -qn "Enter q to quit, any other key to continue: "
            read A1
            [ "${A1}" == "q" ] && exit 0
            _ask_intime
        fi
        if [ "${TAIL_BLACK}" -gt "30" ] ; then
            _report -wt "WARNING - There are at least ${TAIL_BLACK} frames of black at the end of ${INPUT}"
            _report -qn "Enter q to quit, any other key to continue: "
            read A2
            [ "${A2}" == "q" ] && exit 0
            _ask_outtime
        fi
    fi
fi

if [ "${PHASECHECKTEST}" = "Y" ] ; then
    _report -dt "Checking audio phase for $(basename "${INPUT}")"
    _get_phase_warning "${INPUT}"
    if [ "${PHASE_ERROR}" -gt "0" ] ; then
        _report -w "There are ${PHASE_ERROR} sections of out-of-phase audio!"
        _report -qn "Enter q to quit, any other key to continue: "
        read A3
        [ "${A3}" == "q" ] && exit 0
    fi
fi

#frame count test- will ask operator for what to do if there is a discrepancy between the container frame count and the video track frame count.
_get_frame_count "${INPUT}"

# set up package directories
OBJECTSDIR="${OUTDIR_INGESTFILE}/${MEDIAID}/objects"
_run_critical _mkdir2 "${OBJECTSDIR}"

LOGDIR="${OUTDIR_INGESTFILE}/${MEDIAID}/metadata/logs"
_run _mkdir2 "${LOGDIR}"
INGESTLOG="${LOGDIR}/capture.log"

#performing interlacement test if formula is none- only to be used in specific edge cases, answer should be no in most cases.
if [[ "${FORMULA}" == "check interlacement" ]] ; then
        INTERLACE_CHOICE="Y"
fi

#perform interlacement test
if [[ "${INTERLACE_CHOICE}" == "Y" ]] ; then
    _get_interlacement_full "${INPUT}"
fi

# queue handling
if [ "${PRIORITY}" = "put in queue" ] ; then
    _add_mediaid_to_queue
    NEXT=$(head -n 1 "${QUEUEFILE}")
    while [ "${MEDIAID}" != "${NEXT}" ] ; do
        NEWNEXT=$(head -n 1 "${QUEUEFILE}")
        echo -n "This process is waiting behind these identifiers: "
        cat "${QUEUEFILE}" | tr '\n' ' '
        echo
        while [ "${NEXT}" = "${NEWNEXT}" ] ; do
            sleep 10
            NEWNEXT=$(head -n 1 "${QUEUEFILE}")
        done
        NEXT="${NEWNEXT}"
    done
fi

_log -b

#writing out variable values to the capture.log file
echo -e "${LOG}" >> "${INGESTLOG}"
_writeingestlog "media ID" "${MEDIAID}"
_writeingestlog "media ID slate" "${MEDIAID4SLATE}"
_writeingestlog "operator" "${OP}"
_writeingestlog "input" "${INPUT}"
_writeingestlog "processing_directory" "${OUTDIR_INGESTFILE}"
_writeingestlog "audiodecision" "${AUDIODECISION}"
_writeingestlog "cropdecision" "${CROPDECISION}"
_writeingestlog "cleanupdecision" "${CLEANUPDECISION}"
_writeingestlog "formula" "${FORMULA}"
_writeingestlog "ingest_process_dir" "${OUTDIR_INGESTFILE}"
_writeingestlog "ingest_process_dir_freespace" "$(df -h "${OUTDIR_INGESTFILE}" | tail -n1 | awk '{print $4}')"
_writeingestlog "computer_name" "$(uname -n)"
_writeingestlog "user_name" "$(whoami)"
_writeingestlog "operating_system_version" "$(uname -v)"
_writeingestlog "datetime_start" "$(_get_iso8601)"
_writeingestlog "Series Title" "${SERIESTITLE}"
_writeingestlog "Episode Title" "${EPISODETITLE}"
_writeingestlog "made this" "ingestfile"
_writeingestlog "Interlacement test" "${INTERLACETEST}"

if [ -n "$(cat "${PHASEREPORT}" | xargs)" ] ; then
	_writeingestlog "Out_of_phase_audio_ranges" "$(cat "${PHASEREPORT}" | xargs)"
else
    _writeingestlog "Out_of_phase_audio_ranges" "None"
fi

if [ "${INTIME}" ] ; then
    _writeingestlog "intime" "${INTIME}"
fi
if [ "${OUTTIME}" ] ; then
    _writeingestlog "outtime" "${OUTTIME}"
fi

#log package type
if [ "${PRESERVATION_MODE}" == "Y" ] ; then
    _writeingestlog "package type" "Preservation-Video"
else
    _writeingestlog "package type" "Production"
fi

# rsync
FROM=$(_get_filesystem "${INPUT}")
TO=$(_get_filesystem "${OBJECTSDIR}/")
# make sure the input is still there
if [ ! -f "${INPUT}" ] ; then
    _report -wt "The input file is no longer available! Where did $(basename "${INPUT}") go? Please redo."
    _writeerrorlog "ingestfile" "The input file, $(basename "${INPUT}"), was no longer available, so ingest file could not continue."
    # clean up queue
    [ "${PRIORITY}" == "put in queue" ] && _cleanup
    exit 1
fi

# either rsync or mv the input into the package
if [ "${FROM}" == "${TO}" -a "${CLEANUP_CHOICE}" == "Y" ] ; then
    _report -dt "Because ${INPUT} and ${OBJECTSDIR} are on the same filesystem and preservation mode is enabled we will mv rather than rsync."
    _run_critical mv -v -n "${INPUT}" "${OBJECTSDIR}/"
    if [ ! "${#FILES[@]}" = 0 ] ; then
        _run_critical mv -v -n "${FILES[@]}" "${LOGDIR}/"
    fi
else
    _report -dt "STATUS Copying the original file to library storage at ${OBJECTSDIR}."
    LOGFILE="${LOGDIR}/rsync_$(_get_iso8601_c)_$(basename ${0})_${VERSION}.txt"
    "${SCRIPTDIR}/migratefiles" -l "${LOGFILE}" -o "${OBJECTSDIR}" "${INPUT}"
    if [ ! "${#FILES[@]}" = 0 ] ; then
        _run_critical rsync -rt --progress --log-file="${LOGDIR}/rsync_$(_get_iso8601_c)_$(basename $0)_${VERSION}.txt" "${FILES[@]}" "${LOGDIR}/"
    fi
fi

unset MAKEBROADCASTOPTS
[ "${AUDIODECISION}" == "Only use left of the first audio track [for 21st Century]" -o "${AUDIODECISION}" == "left" ] && MAKEBROADCASTOPTS+=(-l)
[ "${AUDIODECISION}" == "Only use right of the first audio track" ] && MAKEBROADCASTOPTS+=(-r)
[ "${CROPDECISION}" == "Examine the video and auto-crop out black borders (slower)" ] && MAKEBROADCASTOPTS+=(-c)
if [ ! -z "${FORMULA}" ] ; then
    MAKEBROADCASTOPTS+=(-F "${FORMULA}")
fi
#create slate version first and upload to omneon
if [ "${SLATE_CHOICE}" = "Y" ] ; then
    "${SCRIPTDIR}/makebroadcast" -s "${MAKEBROADCASTOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    if [ "${DELIVERYTOOMNEON}" == "Y" ] ; then
        _report -dt "STATUS Uploading ${OBJECTSDIR}/service/${MEDIAID%.*}_SLATE.mov to the OMNEON."
        "${SCRIPTDIR}/uploadomneon" "${OBJECTSDIR}/service/${MEDIAID%.*}_SLATE.mov"
        _email_delivery "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
    fi

fi

# make copy for broadcast
"${SCRIPTDIR}/makebroadcast" "${MAKEBROADCASTOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"

# upload broadcast copy
if [ "${DELIVERYTOOMNEON}" == "Y" ] ; then
    _report -dt "STATUS Uploading ${OBJECTSDIR}/service/${MEDIAID%.*}.mov to the OMNEON."
    "${SCRIPTDIR}/uploadomneon" "${OBJECTSDIR}/service/${MEDIAID%.*}.mov"
    _email_delivery "${MAKEBROADCAST_DELIVERY_EMAIL_TO}"
fi

# make access copies
if [ "${MAKEACCESSCOPIES}" == "Y" ] ; then
    _report -dt "STATUS Making access copies."
    # makemp3
    "${SCRIPTDIR}/makemp3" "${OUTDIR_INGESTFILE}/${MEDIAID}"

    # makeframes
    unset MAKEFRAMESOPTS
    [ "${DELIVERACCESSCOPIES}" = "Y" ] && MAKEFRAMESOPTS=(-d "${YOUTUBEDELIVER}")
    "${SCRIPTDIR}/makeframes" "${MAKEFRAMESOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"

    # make waveform
    "${SCRIPTDIR}/makewaveform" "${OUTDIR_INGESTFILE}/${MEDIAID}"

    # makeyoutube
    unset MAKEYOUTUBEOPTS
    [ "${DELIVERACCESSCOPIES}" = "Y" ] && MAKEYOUTUBEOPTS=(-Y -d "${YOUTUBEDELIVER}")
    "${SCRIPTDIR}/makeyoutube" "${MAKEYOUTUBEOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"

    # makepodcast
    if [ $(echo "${MEDIAID}" | grep -E "${REGEX4PODCAST}") ] ; then
        _report -dt "${MEDIAID} qualifies for podcast creation."
        unset MAKEPODCASTOPTS
        [ "${DELIVERACCESSCOPIES}" == "Y" ] && MAKEPODCASTOPTS=(-d "${PODCASTDELIVER}")
        "${SCRIPTDIR}/makepodcast" "${MAKEPODCASTOPTS[@]}" "${OUTDIR_INGESTFILE}/${MEDIAID}"

    else
        _report -dt "${MEDIAID} does NOT qualify for podcast creation, skipping."
        _writeerrorlog "makepodcast" "${MEDIAID} did not qualify for podcast creation and was skipped."
    fi
    # makedvd
    "${SCRIPTDIR}/makedvd" "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi
# makemetadata
"${SCRIPTDIR}/makemetadata" "${OUTDIR_INGESTFILE}/${MEDIAID}"

# checksums
if [ "${DOCHECKSUMS}" = "Y" ] ; then
    "${SCRIPTDIR}/checksumpackage" "${OUTDIR_INGESTFILE}/${MEDIAID}"
fi

# more logging
_writeingestlog "datetime_end" "$(_get_iso8601)"

# fingerprint
"${SCRIPTDIR}/makefingerprint" "${OUTDIR_INGESTFILE}/${MEDIAID}"

# move and cleanup
if [[ "${DELIVERYTOAIPSTORAGE}" == "Y" ]] ; then
    if [ "${AIP_STORAGE}" != "${OUTDIR_INGESTFILE}" ] ; then
    "${SCRIPTDIR}/migratefiles" -r -o "${AIP_STORAGE}" "${OUTDIR_INGESTFILE}/${MEDIAID}"
    RSYNC_ERR="${?}"
    [ $(du -s "${OUTDIR_INGESTFILE}/${MEDIAID}" | awk '{print $1}') = "0" ] && rm -r "${OUTDIR_INGESTFILE}/${MEDIAID}"
    _report -dt "STATUS Done. Final package has been delivered to ${AIP_STORAGE}/${MEDIAID}"
    else echo "As Target directory is same as Input directory, files were not migrated."
    fi
fi
echo "${RSYNC_ERR}"

if [[ "${CLEANUP_CHOICE}" == "Y" ]] ; then
    if [ "${RSYNC_ERR}" -gt "0" ] ; then
        echo "${RSYNC_ERR}"
        _report -wt "Cancelling requested deletion of source file, not looking safe."
    else
        _report -dt "Removing the source file from ${INPUT} as requested."
        _run rm -f "${INPUT}"
    fi
fi

# clean up queue
[ "${PRIORITY}" == "put in queue" ] && _remove_mediaid_from_queue
_report_to_db
_log -e
