#!/bin/bash
# mmtest, regression test for edits to "make" scripts
# does not test dvd derivatives or previously DVD-only options; iso file checksums cannot match consistently
VERSION="1.0"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg ffprobe)
_initialize_make

# expected checksums values, from mm_v2.3.1 derivative creation scripts
FIXITY_TABLE="youtube/sample1.mp4,410712a4d7257b3c8a97e02a5b2f201f
youtube/sample2.mp4,2a697aacb36c4410c569bf166f3f6e8d
youtube/sample3.mp4,6bd650e8e866172571b10081116e8454
youtube/sample4.mp4,9e1785bf9cf8bf9c68e54dcb04e0597d
broadcast/sample1_SLATE.mov,324387df9854dae4d311bfc18710fc48
broadcast/sample2_SLATE.mov,a55ab285829e06475b338a5bbcc773fb
broadcast/sample3_SLATE.mov,551c0f57dff021b5025d63c97b1b1ff9
broadcast/sample4_SLATE.mov,ec17629154ed6d923cb719a04ce3f1db
prores/sample1.mov,2cf8bd842c52419a9999702f26f529ff
prores/sample2.mov,3b392a8793189a9ec22364f8735660a3
prores/sample3.mov,d7fef5955a9c266a3399c5da3e965179
prores/sample4.mov,2c178c9527dbbe1f825a1142b595caf9
resourcespace/sample1.mp4,87a53afaf17bfca9d7dd3fd32631de3c
resourcespace/sample2.mp4,ee376d9bcd2041652758c2679ee06970
resourcespace/sample3.mp4,9f5fc9c23a8cc57f465d7a1054bd8e9b
resourcespace/sample4.mp4,5402392946f3fe37cd25c2969f520bc1
mp3/sample1.mp3,75fa2d6089c74de3e0f7e2cfdf422c59
mp3/sample2.mp3,ff34154e7c334f1073b826687357fbc9
mp3/sample3.mp3,65bea5b801253b4275afe02970bb5886
mp3/sample4.mp3,7fa7bd8a195d39bca8be77ecb25d8a13
pod/sample1_podcast.mov,d451a78e089f275f44c3515a5d9a2ade
pod/sample2_podcast.mov,e344406b135ccddc0a873cfbbbdb6789
pod/sample3_podcast.mov,d97562443bb3f4e33025a79ead750a11
pod/sample4_podcast.mov,cc55e1ddcc4e0ba726f1fccf791a4c8b"

# make test folders
ROOTDIR="/tmp/testmakederiv$(date +%Y%m%d%H%M%S)"
TESTDIR="$ROOTDIR/test"
YT_TESTDIR="$ROOTDIR/youtube"
BR_TESTDIR="$ROOTDIR/broadcast"
PR_TESTDIR="$ROOTDIR/prores"
RS_TESTDIR="$ROOTDIR/resourcespace"
MP3_TESTDIR="$ROOTDIR/mp3"
POD_TESTDIR="$ROOTDIR/pod"
LOGDIR="$BR_TESTDIR/logs/broadcast"
mkdir -p "$ROOTDIR" "${TESTDIR}" "${YT_TESTDIR}" "${BR_TESTDIR}" "${PR_TESTDIR}" "${RS_TESTDIR}" "${MP3_TESTDIR}" "${POD_TESTDIR}" "${LOGDIR}"

# create test files
ffmpeg -f lavfi -i testsrc2=r=25:s=320x240 -f lavfi -i "aevalsrc=exprs=sin(440*2*PI*t)|sin(44*2*PI*t):s=48000:c=stereo" -map 0 -map 1 -t 5 -c:v ffv1 -c:a flac -y "$TESTDIR/sample1.mkv"
ffmpeg -f lavfi -i testsrc2=r=30000/1001:s=1920x1080 -f lavfi -i "aevalsrc=exprs=cos(440*2*PI*t)|sin(44*2*PI*t):s=48000:c=stereo" -map 0 -map 1 -t 5 -c:v ffv1 -c:a flac -y "$TESTDIR/sample2.mkv"
ffmpeg -f lavfi -i mandelbrot=r=25:s=320x240 -f lavfi -i "aevalsrc=exprs=sin(440*2*PI*t)|cos(44*2*PI*t):s=48000:c=stereo" -map 0 -map 1 -t 5 -c:v ffv1 -c:a flac -y "$TESTDIR/sample3.mkv"
ffmpeg -f lavfi -i testsrc=r=25:s=720x480 -f lavfi -i "aevalsrc=exprs=cos(440*2*PI*t)|cos(44*2*PI*t):s=48000:c=stereo" -map 0 -map 1 -t 5 -c:v ffv1 -c:a flac -y "$TESTDIR/sample4.mkv"

# set slate options
INGESTLOG="$LOGDIR/capture.log" ; touch "$INGESTLOG"
echo "ingestlog is $INGESTLOG"
_writeingestlog "media ID slate" "mediaID"
_writeingestlog "Series Title" "Series Title"
_writeingestlog "Episode Title" "Episode Title"

# run checksum tests
_checksumreport(){
    ACTUAL_CHECKSUM=$(md5 -q "$OUTPUT")
    EXPECTED_CHECKSUM=$(echo "${FIXITY_TABLE}" | grep "$OUTPUT_RELATIVE_PATH" | cut -d , -f 2)
    if [[ $ACTUAL_CHECKSUM == $EXPECTED_CHECKSUM ]] ; then
        _report -dt "Checksum match."
    else
        _report -wt "Checksums do not match."
        _report -w "Checksum expected: $EXPECTED_CHECKSUM"
        _report -w "Checksum generated: $ACTUAL_CHECKSUM"
        FAILEDCHECKSUMS+="$OUTPUT_RELATIVE_PATH "
    fi
}

find "$TESTDIR" -type f ! -name '.*' > /tmp/list.txt
for file in `cat /tmp/list.txt` ; do
    mkvpropedit --delete segment-uid "$file" # standardizes Matroska test files
    "${SCRIPTDIR}/makederiv" -T youtube -Y -l -o "${YT_TESTDIR}" "$file"
    OUTPUT="${YT_TESTDIR}/$(basename "${file%.*}.mp4")"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
    "${SCRIPTDIR}/makederiv" -T broadcast -F tff -s -c -o "${BR_TESTDIR}" "$file"
    OUTPUT="${BR_TESTDIR}/$(basename "${file%.*}_SLATE.mov")"
    echo "INGESTLOG is $INGESTLOG"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
    "${SCRIPTDIR}/makederiv" -T prores -o "${PR_TESTDIR}" "$file"
    OUTPUT="${PR_TESTDIR}/$(basename "${file%.*}.mov")"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
    "${SCRIPTDIR}/makederiv" -T resourcespace -v Y -o "${RS_TESTDIR}" -d "$ROOTDIR" -e "${EMAILADDRESS_DELIVERY}" "$file"
    OUTPUT="${RS_TESTDIR}/$(basename "${file%.*}.mp4")"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
    "${SCRIPTDIR}/makederiv" -T mp3 -o "${MP3_TESTDIR}" "$file"
    OUTPUT="${MP3_TESTDIR}/$(basename "${file%.*}.mp3")"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
    "${SCRIPTDIR}/makederiv" -T podcast -o "${POD_TESTDIR}" -E "${EMAILADDRESS_OUTCOME}" "$file"
    OUTPUT="${POD_TESTDIR}/$(basename "${file%.*}_podcast.mov")"
    OUTPUT_RELATIVE_PATH=$(echo "${OUTPUT}" | sed "s:${ROOTDIR}/::g")
    _checksumreport
done

if [[ -z "$FAILEDCHECKSUMS" ]] ; then
    _report -dt "All checksums match."
else
    _report -wt "Checksums did not match for the following derivative files:"
    _report -w "$FAILEDCHECKSUMS"
fi

# delete all test files after 10 minutes
echo "mmtest will delete test files from /tmp in 1 minute; press control-C to keep files in /tmp folder."
sleep 60 && rm -r "${ROOTDIR}"

