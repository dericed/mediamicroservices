#!/bin/bash
# make dvd

scriptdir=`dirname "$0"`
. "$scriptdir/mmvariables"
. "$scriptdir/mmfunctions"

cleanup(){
	log -a "Process aborted"
	exit 1
}

trap cleanup SIGHUP SIGINT SIGTERM
log -b

usage(){
	echo
	echo "$(basename $0) ${version}"
	echo "This script may be run interactively by running it with no arguments or may be used with the following options."
	echo "Usage: $(basename $0) [ -m mediaid ]"
	echo "  -m mediaid"
	exit
}

# command-line options to set mediaid and original variables
while getopts ":hm:" opt; do
	case "$opt" in
		h) usage ;;
		m) mediaid="$OPTARG" ;;
		\?) echo "Invalid option: -$OPTARG" ; exit 1 ;;
		:) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
	esac
done
shift $(( ${OPTIND} - 1 ))

counter=0
while [ "$*" != "" ] ; do
	uuid=`uuidgen`

	cd "$1"
	objects_file=`find "./objects" -maxdepth 1 -mindepth 1 -type f -name "*.mov" ! -name ".*"`
	service_file=`find "./objects/service" -maxdepth 1 -mindepth 1 -type f -name "*.mov" ! -name ".*"`
	mkdir -p "/tmp/$uuid"

	outputdir="./metadata/submissionDocumentation/fileMeta"
	mkdir -p "$outputdir"

	objectbasename=`basename "$objects_file"`
	servicebasename=`basename "$service_file"`
	mediaid=`basename "$1" | cut -d. -f1`

	find "./objects/access" -type d -mindepth 1 -maxdepth 1 > "/tmp/$uuid/access.txt"
	while read access ; do
		accessname=`basename "$access"`
		find "$access" -type f ! -name ".*" > "/tmp/$uuid/access_${accessname}.txt"
		while read access_file ; do
			mkdir -p "$outputdir/access/$accessname"
			accessbasename=`basename "$access_file"`
			ffprobe 2>/dev/null "$access_file" -show_format -show_streams -show_data -show_error -show_versions -noprivate -of xml="q=1:x=1" > "$outputdir/access/$accessname/${accessbasename%.*}_ffprobe.xml"
			ffprobe 2>/dev/null "$access_file" -show_format -show_streams -show_data -show_error -show_versions -of json > "$outputdir/access/$accessname/${accessbasename%.*}_ffprobe.json"
		mediainfo --language=raw -f --output=XML "$access_file" > "$outputdir/access/$accessname/${accessbasename%.*}_mediainfo.xml"
		done < "/tmp/$uuid/access_${accessname}.txt"
	done < "/tmp/$uuid/access.txt"

	outputdir="./metadata/submissionDocumentation/fileMeta"
	mkdir -p "$outputdir"

	objectbasename=`basename "$objects_file"`
	servicebasename=`basename "$service_file"`
	mediaid=`basename "$1" | cut -d. -f1`

	# transcode
	report -dt "STATUS Making metadata reports."

	#only works with one file in objects , to do
	mkdir -p "$outputdir/objects"
	ffprobe 2>/dev/null "$objects_file" -show_format -show_streams -show_data -show_error -show_versions -noprivate -of xml="q=1:x=1" > "$outputdir/objects/${objectbasename%.*}_ffprobe.xml"
	ffprobe 2>/dev/null "$objects_file" -show_format -show_streams -show_data -show_error -show_versions -of json > "$outputdir/objects/${objectbasename%.*}_ffprobe.json"
	mediainfo --language=raw -f --output=XML "$objects_file" > "$outputdir/objects/${objectbasename%.*}_mediainfo.xml"

	mkdir -p "$outputdir/service"
	ffprobe 2>/dev/null "$service_file" -show_format -show_streams -show_data -show_error -show_versions -noprivate -of xml="q=1:x=1" > "$outputdir/service/${servicebasename%.*}_ffprobe.xml"
	ffprobe 2>/dev/null "$service_file" -show_format -show_streams -show_data -show_error -show_versions -of json > "$outputdir/service/${servicebasename%.*}_ffprobe.json"
	mediainfo --language=raw -f --output=XML "$service_file" > "$outputdir/service/${servicebasename%.*}_mediainfo.xml"
	rm -r -f "/tmp/$uuid"
	shift
	counter=`expr "$counter" + 1`
done
log -e
