#!/bin/bash
# makepdf, makes a pdf from an image series
VERSION="1.0"
SCRIPTDIR=$(dirname $(which "${0}"))
. "${SCRIPTDIR}/mmfunctions" || { echo "Missing '${SCRIPTDIR}/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg convert pdfjoin tesseract)
_initialize_make

fix_tif_name(){
    local tif="${1}"
    local tifname=$(basename "${TIF}")
    local tifdir=$(dirname "${TIF}")
    local basename=$(echo "${tifname}" | cut -d_ -f1 | cut -d. -f2)
    local pageno=$(echo "${tifname}" | cut -d_ -f2 | cut -d. -f1)
    local EXTENSION=$(echo "${tifname}" | cut -d_ -f2 | cut -d. -f2)
    local pageno=$(echo "0000${pageno}" | tail -c 4 | head -c 3)
    _report -dt "Renaming to fit image sequence naming pattern."
    local old_tif_name="${TIF}"
    NEW_TIF_NAME="${tifdir}/${basename}_${pageno}.${EXTENSION}"
    mv -v -n "${old_tif_name}" "${NEW_TIF_NAME}"
}

check_tif_name(){
    local tif="${1}"
    local tifname=$(basename "${TIF}")
    local tifdir=$(dirname "${TIF}")
    local basename=$(echo "${tifname}" | cut -d_ -f2 | cut -d. -f2)
    local pageno=$(echo "${tifname}" | cut -d_ -f2 | cut -d. -f1)
    local EXTENSION=$(echo "${tifname}" | cut -d_ -f2 | cut -d. -f1)
    local pageno=$(echo "0000${pageno}" | tail -c 4 | head -c 3)
    if [ "$EXTENSION" = "TIF" ] && [ $(echo $pageno | awk '{print length()}') = "3" ] ; then
        continue
    else
        fix_tif_name "${TIF}"
    fi
}

_usage(){
    echo
    echo "$(basename "${0}") ${VERSION}"
    echo "This application will create a small pdf file (suitable for sharing online) from a collection of image file or package input with the following options."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename ${0}) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && _usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":o:d:e:E:nh" OPT ; do
    case "${OPT}" in
        o) OUTPUTDIR_FORCED="${OPTARG}" && _check_outputdir_forced ;;
        d) DELIVERDIR="${OPTARG}" && _check_deliverdir ;;
        e) EMAILADDRESS_DELIVERY="${OPTARG}" ;;
        E) EMAILADDRESS_OUTCOME="${OPTARG}" ;;
        n) DRYRUN=true;;
        h) _usage ;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makepdf" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

[ "${EMAILADDRESS_OUTCOME}" ] && check_emailaddress "${EMAILADDRESS_OUTCOME}"
[ "${EMAILADDRESS_DELIVERY}" ] &&  check_emailaddress "${EMAILADDRESS_DELIVERY}"

while [ "${*}" != "" ] ; do
    # get context about the input
    INPUT="${1}"
    shift
    if [ -z "${OUTPUTDIR_FORCED}" ] ; then
        [ -d "${INPUT}" ] && { OUTPUTDIR="${INPUT}/objects/access/pdf_1" && LOGDIR="${INPUT}/metadata/logs" ;};
        [ -f "${INPUT}" ] && { OUTPUTDIR=$(dirname "${INPUT}")"/access/pdf_1" && LOGDIR="$(dirname "${INPUT}")/access/logs" ;};
        [ ! "${OUTPUTDIR}" ] && { OUTPUTDIR="${INPUT}/objects/access/pdf_1" && LOGDIR="${INPUT}/metadata/logs" ;};
    else
        OUTPUTDIR="${OUTPUTDIR_FORCED}"
        LOGDIR="${OUTPUTDIR}/logs"
    fi
    OUTPUTDIRTEXT="${INPUT}/objects/access/txt_1"
    _run mkdir -p "${LOGDIR}"
    exec > >(tee "${LOGDIR}/$(basename "${0}")_$(_get_iso8601_c)_$(basename ${0})_${VERSION}.txt")
    exec 2>&1

    #_find_input "${INPUT}"
    if [ -d "${INPUT}/objects" ] ; then
        SOURCEDIR="${INPUT}/objects"
    else
        _report -wt "No source objects folder"
        _writeerrorlog "makepdf" "No source objects folder provided. The script could not continue."
        exit 1
    fi
    MEDIAID=$(basename "${INPUT}" | cut -d. -f1)

    # set up output
    _log -b
    OUTPUT="${OUTPUTDIR}/${MEDIAID%.*}.pdf"
    [ -s "${OUTPUT}" ] && { _report -wt "WARNING ${OUTPUT} already exists, skipping process" ; shift ; continue ;};
    _run mkdir -p "${OUTPUTDIR}"

    TMP_MAKEPDF_DIR="${INPUT}/tmp"
    TMP_PNG_DIR="${TMP_MAKEPDF_DIR}/pngs"
    TMP_CLEAN_DIR="${TMP_MAKEPDF_DIR}/pngs_cleaned"
    _run mkdir -p "${TMP_MAKEPDF_DIR}" "${TMP_PNG_DIR}" "${TMP_CLEAN_DIR}" "${OUTPUTDIRTEXT}"

    for TIF in `find "${SOURCEDIR}" -maxdepth 1 -mindepth 1 -iname "*.tif" -type f` ; do
        check_tif_name "${TIF}"
        if [ "${NEW_TIF_NAME}" ] ; then
            TIF="${NEW_TIF_NAME}"
        fi
        if [[ ! -s "${TMP_PNG_DIR}/$(basename "${TIF%.*}").png" ]] ; then
            ffmpeg -i "${TIF}" -pix_fmt gray -y "${TMP_PNG_DIR}/$(basename "${TIF%.*}").png"
        fi
        convert "${TMP_PNG_DIR}/$(basename "${TIF%.*}").png" -level 10%,75%,1 -blur 2 +dither -resize 2550x3300 -monochrome -flatten +repage -define png:bit-depth=8 -define png:color-type=0 "${TMP_CLEAN_DIR}/$(basename "${TIF%.*}").png"
        tesseract "${TMP_CLEAN_DIR}/$(basename "${TIF%.*}").png" "${TMP_CLEAN_DIR}/$(basename "${TIF%.*}")" -l eng -psm 4 pdf "/usr/local/etc/tesseract.conf"
        tesseract "${TMP_CLEAN_DIR}/$(basename "${TIF%.*}").png" "${TMP_CLEAN_DIR}/$(basename "${TIF%.*}")" -l eng -psm 4 "$/usr/local/etc/tesseract.conf"
    done
    pdfjoin --fitpaper 'false' --rotateoversize 'false' --paper letter $(find "${TMP_CLEAN_DIR}" -name "*.pdf" | sort | xargs) --outfile "${OUTPUTDIR}/${MEDIAID}.pdf"
    cat $(find "${TMP_CLEAN_DIR}" -name "*.txt" | sort | xargs) > "${OUTPUTDIRTEXT}/${MEDIAID}.txt"

    #if [ -d "${TMP_MAKEPDF_DIR}" ] ; then
    #    _run rm -rvf "${TMP_MAKEPDF_DIR}"
    #fi
    _summarize_make
    _deliver_output "${MAKEYOUTUBE_DELIVERY_EMAIL_TO}"
    _log -e
done
